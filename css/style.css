*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 50%; } }

body {
  font-family: "Nunito", sans-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  /**
    Defining row dimentions
      Header: 80% of viewport height
      Features: Adjust to the content, grow or shrink depending on content
      Story: 40% of viewport width, it will adjust denpending on viewport width
      Homes, Gallery and Footer: Adjust to its content
      **/
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /** 
      - First 8rem column is for sidebar width
      - Create 8 colums of same size where the content determine the min width and maxwidth is 14rem 
      - minmax adjust columns while i resize the viewport, column
      width never be smaller than content and greater than 14rem 
      - The 1fr elements is to add columns at the begining and the
         end of grid and center the elements, althought in some
         sections will occupy that space 
    **/
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];
  /**
      With this, only set dimentions for menu and header
      the rest of row will be size automatically by the content
    **/ }
  @media only screen and (max-width: 62.5em) {
    .container {
      grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
      grid-template-columns: [full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; } }
  @media only screen and (max-width: 50em) {
    .container {
      grid-template-rows: 6rem calc(100vh - 6rem); } }

/**
  Define heading placeholder from which i extend , to reuse code
  it is like inherent in classes
**/
.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

.heading-1 {
  font-size: 4.5rem;
  color: #f9f7f6;
  line-height: 1; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483A; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483A; }

.btn {
  background-color: #c69963;
  color: #fff;
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all .2s; }
  .btn:hover {
    background-color: #B28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1;
  display: flex;
  justify-content: center; }
  @media only screen and (max-width: 62.5em) {
    .sidebar {
      grid-column: 1 / -1;
      grid-row: 1 / 2;
      justify-content: flex-end;
      align-items: center; } }

.nav-btn {
  border: none;
  border-radius: 0;
  background-color: #fff;
  height: 2px;
  width: 4.5rem;
  justify-content: center; }
  .nav-btn::before, .nav-btn::after {
    background-color: #fff;
    height: 2px;
    width: 4.5rem;
    content: "";
    display: block; }
  .nav-btn::before {
    transform: translateY(-1.5rem); }
  .nav-btn::after {
    transform: translateY(1.3rem); }
  @media only screen and (max-width: 62.5em) {
    .nav-btn {
      margin-top: 0;
      margin-right: 3rem; }
      .nav-btn::before {
        transform: translateY(-1.2rem); }
      .nav-btn::after {
        transform: translateY(1rem); } }

.header {
  background-color: #54483A;
  /**
      Here we say, that header finish in the 6th column of col-end direction 
    **/
  grid-column: full-start / col-end 6;
  background-image: linear-gradient(rgba(16, 29, 44, 0.93), rgba(16, 29, 44, 0.93)), url(../img/hero.jpeg);
  /** 
      Specifies the size of the background images and in this case resize the image
      to cover the entire container
    **/
  background-size: cover;
  background-position: center;
  padding: 8rem;
  padding-top: 4rem;
  display: grid;
  /** 
      This set the space of nexter icon because .container class occupy 80%, then header
      first row occupy 80% too. Minmax is a fuction to avoid overlaping text and button
    **/
  grid-template-rows: 1fr min-content minmax(6rem, min-content) 1fr;
  grid-template-columns: minmax(min-content, max-content);
  grid-row-gap: 1.5rem;
  justify-content: center;
  /**
     Make header occupy all screen width 
    **/ }
  @media only screen and (max-width: 50em) {
    .header {
      grid-column: 1 / -1; } }
  .header__logo {
    height: 3rem;
    justify-self: center; }
  .header__btn {
    align-self: start;
    justify-self: start; }
  .header__seenon-text {
    /**
            I would be onle the text div, i couldn't use grid, but, because i iuse
            seudo clases before and after, i can use  grid layout 
          **/
    display: grid;
    grid-template-columns: 1fr max-content 1fr;
    grid-column-gap: 1.5rem;
    align-items: center;
    font-size: 1.6rem;
    color: #aaa;
    /**
            Use before and after to paint lines before and after the text
          **/ }
    .header__seenon-text::before, .header__seenon-text::after {
      content: "";
      height: 1px;
      display: block;
      background-color: currentColor; }
  .header__seenon-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-column-gap: 3rem;
    justify-items: center;
    align-items: center; }
    .header__seenon-logos img {
      max-height: 2.5rem;
      max-width: 100%;
      filter: brightness(70%); }

.realtors {
  background-color: #101d2c;
  /**
      Realtor begin in the 7th colums starting at col-start and finish in full-end
    **/
  grid-column: col-start 7 / full-end;
  padding: 3rem;
  display: grid;
  align-content: center;
  justify-content: center;
  grid-row-gap: 2rem;
  justify-items: center;
  /**
     Make realtors occupy all screen width 
    **/ }
  @media only screen and (max-width: 50em) {
    .realtors {
      grid-column: 1 / -1; } }
  .realtors__list {
    display: grid;
    grid-template-columns: min-content max-content;
    grid-column-gap: 2rem;
    grid-row-gap: 5vh;
    align-items: center;
    /**
          Set relators side by side
        **/ }
    @media only screen and (max-width: 50em) {
      .realtors__list {
        grid-template-columns: repeat(3, min-content max-content); } }
    @media only screen and (max-width: 37.5em) {
      .realtors__list {
        grid-template-columns: min-content max-content; } }
  .realtors__img {
    width: 7rem;
    border-radius: 50%;
    display: block; }
  .realtors__sold {
    text-transform: uppercase;
    color: #aaa;
    margin-top: -3px; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0; }
  @supports (display: grid) {
    .features {
      display: grid;
      /**
        With auto-fit i say that set automatically columns,
        only taking in account that his min width can't be less
        than 25rem
      **/
      grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
      grid-gap: 6rem;
      /** This is for all text be aligned at the begging
          no matter the total lines of paragraph 
      **/
      align-items: start; } }

/**
 Set style for each feature 
**/
.feature {
  float: left;
  width: 33.3333%;
  margin-bottom: 6rem;
  /**
      Here we define a new grid for the feature element itself
    **/
  display: grid;
  grid-template-columns: min-content 1fr;
  /**
     Define space between rows and columns 
    **/
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem; }
  @supports (display: grid) {
    .feature {
      width: auto;
      margin-bottom: auto; } }
  .feature__icon {
    fill: #c69963;
    width: 4.5rem;
    height: 4.5rem;
    /**
          Use this to push text feature to the right column, withouth this
          it would appear on first column second row, with this will appear
          in second row and second column.

          Note: In this case we use sapn 2 instead -1, because -1 is for explicit
          grid , and in this case second row is implicit grid and it wouldn't recongnize
          second row with -1
        **/
    grid-row: 1 / span 2;
    transform: translateY(-1rem); }
  .feature__text {
    font-size: 1.7rem; }

.story__pictures {
  background-color: #c69963;
  /**
         Start in full-start and end with the 4th column in col-end direction
       **/
  grid-column: full-start / col-end 4;
  background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
  display: grid;
  /**
         Create a grid of 6*6
       **/
  grid-template-rows: repeat(6, 1fr);
  grid-template-columns: repeat(6, 1fr);
  align-items: center; }
  @media only screen and (max-width: 50em) {
    .story__pictures {
      grid-column: 1 / -1;
      padding: 6rem; } }

.story__img--1 {
  width: 100%;
  grid-row: 2 / 6;
  grid-column: 2 / 6;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1); }
  @media only screen and (max-width: 50em) {
    .story__img--1 {
      grid-column: 1 / 4;
      grid-row: 1 / -1;
      width: 100%; } }

.story__img--2 {
  width: 115%;
  grid-row: 4 / 6;
  grid-column: 4 / 7;
  z-index: 20;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2); }

.story__content {
  background-color: #f9f7f6;
  /**
         Start in 5th column  starting at col-start and end with full-end
       **/
  grid-column: col-start 5 / full-end;
  padding: 6rem 8vw;
  /**
         Centering content history
       **/
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start; }
  @media only screen and (max-width: 50em) {
    .story__content {
      grid-column: 1 / -1;
      grid-row: 5 / 6; } }

.story__text {
  font-size: 1.5rem;
  font-style: italic;
  margin-bottom: 4rem; }

.homes {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /**
      With auto-fit we say to grid that automatically adjust
      the columns taking in account that each one has a minimun
      size of 25rem
    **/
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 7rem; }

.home {
  background-color: #f9f7f6;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-row-gap: 3.5rem;
  /**
      Space between text card title and icons features of house  
    **/ }
  .home__img {
    width: 100%;
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    z-index: 1; }
  .home__like {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    fill: #c69963;
    height: 2.5rem;
    width: 2.5rem;
    z-index: 2;
    justify-self: end;
    margin: 1rem; }
  .home__name {
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    justify-self: center;
    align-self: end;
    z-index: 3;
    width: 80%;
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.6rem;
    text-align: center;
    padding: 1.25rem;
    background-color: #101d2c;
    color: #fff;
    font-weight: 400;
    transform: translateY(50%); }
  .home__location, .home__rooms {
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      fill: #c69963;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1 / -1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem;
  padding: 1.5rem; }
  .gallery__item--1 {
    grid-row: 1 / span 2;
    grid-column: 1 / span 2; }
  .gallery__item--2 {
    grid-row: 1 / span 3;
    grid-column: 3 / span 3; }
  .gallery__item--3 {
    grid-row: 1 / span 2;
    grid-column: 6 / span 1; }
  .gallery__item--4 {
    grid-row: 1 / span 2;
    grid-column: 7 / span 2; }
  .gallery__item--5 {
    grid-row: 3 / span 3;
    grid-column: 1 / span 2; }
  .gallery__item--6 {
    grid-row: 4 / span 2;
    grid-column: 3 / span 2; }
  .gallery__item--7 {
    grid-row: 4 / span 1;
    grid-column: 5 / span 1; }
  .gallery__item--8 {
    grid-row: 3 / span 2;
    grid-column: 6 / span 2; }
  .gallery__item--9 {
    grid-row: 3 / span 3;
    grid-column: 8 / span 1; }
  .gallery__item--10 {
    grid-row: 6 / span 2;
    grid-column: 1 / span 1; }
  .gallery__item--11 {
    grid-row: 6 / span 2;
    grid-column: 2 / span 2; }
  .gallery__item--12 {
    grid-row: 6 / span 2;
    grid-column: 4 / span 1; }
  .gallery__item--13 {
    grid-row: 5 / span 3;
    grid-column: 5 / span 3; }
  .gallery__item--14 {
    grid-row: 6 / span 2;
    grid-column: 8 / span 1; }
  .gallery__img {
    /** If we dpnt't put this, images take original size that it is of 2000px 
            and overlap the cell and occupy a lot of cells. With this only occupy
            cell width and height 
        **/
    width: 100%;
    height: 100%;
    /**
         This make the image fit inside of figure element and dont overlap de cell.
         For this, we need set width and height.
        **/
    object-fit: cover;
    display: block; }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end;
  padding: 8rem; }

.nav {
  list-style: none;
  display: grid;
  /**
     Auto fit try to fit all columns as posible in one row
    **/
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  grid-gap: 2rem;
  align-items: center;
  /**
      This is the contac us button
    **/ }
  .nav__link:link, .nav__link:visited {
    font-size: 1.4rem;
    color: #fff;
    text-decoration: none;
    text-transform: uppercase;
    text-align: center;
    padding: 1.5rem;
    display: block;
    transition: all .2s;
    background-color: rgba(255, 255, 255, 0.05); }
  .nav__link--1:link, .nav__link--1:visited {
    padding: 2.6rem; }
  @media only screen and (max-width: 50em) {
    .nav__link--2:link, .nav__link--2:visited {
      padding: 2.3rem;
      height: 7.2rem; } }
  @media only screen and (max-width: 50em) {
    .nav__link--3:link, .nav__link--3:visited {
      padding: 2.3rem;
      height: 7.2rem; } }
  .nav__link:hover, .nav__link:active {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-3px); }

.copyright {
  font-size: 1.4rem;
  color: #aaa;
  margin-top: 6rem;
  margin-right: auto;
  margin-left: auto;
  text-align: center;
  width: 70%; }
